// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/cryptoalert.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CryptoMarketData_SubscribePrices_FullMethodName = "/cryptoalert.CryptoMarketData/SubscribePrices"
)

// CryptoMarketDataClient is the client API for CryptoMarketData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CryptoMarketData service for streaming cryptocurrency price data
type CryptoMarketDataClient interface {
	// Subscribe to price updates for specified crypto symbols
	SubscribePrices(ctx context.Context, in *PriceSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PriceTick], error)
}

type cryptoMarketDataClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoMarketDataClient(cc grpc.ClientConnInterface) CryptoMarketDataClient {
	return &cryptoMarketDataClient{cc}
}

func (c *cryptoMarketDataClient) SubscribePrices(ctx context.Context, in *PriceSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PriceTick], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CryptoMarketData_ServiceDesc.Streams[0], CryptoMarketData_SubscribePrices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PriceSubscriptionRequest, PriceTick]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoMarketData_SubscribePricesClient = grpc.ServerStreamingClient[PriceTick]

// CryptoMarketDataServer is the server API for CryptoMarketData service.
// All implementations must embed UnimplementedCryptoMarketDataServer
// for forward compatibility.
//
// CryptoMarketData service for streaming cryptocurrency price data
type CryptoMarketDataServer interface {
	// Subscribe to price updates for specified crypto symbols
	SubscribePrices(*PriceSubscriptionRequest, grpc.ServerStreamingServer[PriceTick]) error
	mustEmbedUnimplementedCryptoMarketDataServer()
}

// UnimplementedCryptoMarketDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCryptoMarketDataServer struct{}

func (UnimplementedCryptoMarketDataServer) SubscribePrices(*PriceSubscriptionRequest, grpc.ServerStreamingServer[PriceTick]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePrices not implemented")
}
func (UnimplementedCryptoMarketDataServer) mustEmbedUnimplementedCryptoMarketDataServer() {}
func (UnimplementedCryptoMarketDataServer) testEmbeddedByValue()                          {}

// UnsafeCryptoMarketDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoMarketDataServer will
// result in compilation errors.
type UnsafeCryptoMarketDataServer interface {
	mustEmbedUnimplementedCryptoMarketDataServer()
}

func RegisterCryptoMarketDataServer(s grpc.ServiceRegistrar, srv CryptoMarketDataServer) {
	// If the following call pancis, it indicates UnimplementedCryptoMarketDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CryptoMarketData_ServiceDesc, srv)
}

func _CryptoMarketData_SubscribePrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PriceSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoMarketDataServer).SubscribePrices(m, &grpc.GenericServerStream[PriceSubscriptionRequest, PriceTick]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoMarketData_SubscribePricesServer = grpc.ServerStreamingServer[PriceTick]

// CryptoMarketData_ServiceDesc is the grpc.ServiceDesc for CryptoMarketData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoMarketData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptoalert.CryptoMarketData",
	HandlerType: (*CryptoMarketDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePrices",
			Handler:       _CryptoMarketData_SubscribePrices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/cryptoalert.proto",
}

const (
	CryptoAlertService_CreateAlert_FullMethodName     = "/cryptoalert.CryptoAlertService/CreateAlert"
	CryptoAlertService_GetAlerts_FullMethodName       = "/cryptoalert.CryptoAlertService/GetAlerts"
	CryptoAlertService_UpdateAlert_FullMethodName     = "/cryptoalert.CryptoAlertService/UpdateAlert"
	CryptoAlertService_DeleteAlert_FullMethodName     = "/cryptoalert.CryptoAlertService/DeleteAlert"
	CryptoAlertService_SubscribeAlerts_FullMethodName = "/cryptoalert.CryptoAlertService/SubscribeAlerts"
)

// CryptoAlertServiceClient is the client API for CryptoAlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CryptoAlertService for managing and streaming cryptocurrency price alerts
type CryptoAlertServiceClient interface {
	// Create a new crypto price alert
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error)
	// Get all alerts for a user
	GetAlerts(ctx context.Context, in *GetAlertsRequest, opts ...grpc.CallOption) (*GetAlertsResponse, error)
	// Update an existing alert
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error)
	// Delete an alert
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error)
	// Subscribe to alert triggers
	SubscribeAlerts(ctx context.Context, in *AlertSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AlertTrigger], error)
}

type cryptoAlertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoAlertServiceClient(cc grpc.ClientConnInterface) CryptoAlertServiceClient {
	return &cryptoAlertServiceClient{cc}
}

func (c *cryptoAlertServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAlertResponse)
	err := c.cc.Invoke(ctx, CryptoAlertService_CreateAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoAlertServiceClient) GetAlerts(ctx context.Context, in *GetAlertsRequest, opts ...grpc.CallOption) (*GetAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertsResponse)
	err := c.cc.Invoke(ctx, CryptoAlertService_GetAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoAlertServiceClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAlertResponse)
	err := c.cc.Invoke(ctx, CryptoAlertService_UpdateAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoAlertServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAlertResponse)
	err := c.cc.Invoke(ctx, CryptoAlertService_DeleteAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoAlertServiceClient) SubscribeAlerts(ctx context.Context, in *AlertSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AlertTrigger], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CryptoAlertService_ServiceDesc.Streams[0], CryptoAlertService_SubscribeAlerts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AlertSubscriptionRequest, AlertTrigger]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoAlertService_SubscribeAlertsClient = grpc.ServerStreamingClient[AlertTrigger]

// CryptoAlertServiceServer is the server API for CryptoAlertService service.
// All implementations must embed UnimplementedCryptoAlertServiceServer
// for forward compatibility.
//
// CryptoAlertService for managing and streaming cryptocurrency price alerts
type CryptoAlertServiceServer interface {
	// Create a new crypto price alert
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error)
	// Get all alerts for a user
	GetAlerts(context.Context, *GetAlertsRequest) (*GetAlertsResponse, error)
	// Update an existing alert
	UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error)
	// Delete an alert
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error)
	// Subscribe to alert triggers
	SubscribeAlerts(*AlertSubscriptionRequest, grpc.ServerStreamingServer[AlertTrigger]) error
	mustEmbedUnimplementedCryptoAlertServiceServer()
}

// UnimplementedCryptoAlertServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCryptoAlertServiceServer struct{}

func (UnimplementedCryptoAlertServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (UnimplementedCryptoAlertServiceServer) GetAlerts(context.Context, *GetAlertsRequest) (*GetAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlerts not implemented")
}
func (UnimplementedCryptoAlertServiceServer) UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (UnimplementedCryptoAlertServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (UnimplementedCryptoAlertServiceServer) SubscribeAlerts(*AlertSubscriptionRequest, grpc.ServerStreamingServer[AlertTrigger]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAlerts not implemented")
}
func (UnimplementedCryptoAlertServiceServer) mustEmbedUnimplementedCryptoAlertServiceServer() {}
func (UnimplementedCryptoAlertServiceServer) testEmbeddedByValue()                            {}

// UnsafeCryptoAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoAlertServiceServer will
// result in compilation errors.
type UnsafeCryptoAlertServiceServer interface {
	mustEmbedUnimplementedCryptoAlertServiceServer()
}

func RegisterCryptoAlertServiceServer(s grpc.ServiceRegistrar, srv CryptoAlertServiceServer) {
	// If the following call pancis, it indicates UnimplementedCryptoAlertServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CryptoAlertService_ServiceDesc, srv)
}

func _CryptoAlertService_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoAlertServiceServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoAlertService_CreateAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoAlertServiceServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoAlertService_GetAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoAlertServiceServer).GetAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoAlertService_GetAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoAlertServiceServer).GetAlerts(ctx, req.(*GetAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoAlertService_UpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoAlertServiceServer).UpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoAlertService_UpdateAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoAlertServiceServer).UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoAlertService_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoAlertServiceServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoAlertService_DeleteAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoAlertServiceServer).DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoAlertService_SubscribeAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlertSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoAlertServiceServer).SubscribeAlerts(m, &grpc.GenericServerStream[AlertSubscriptionRequest, AlertTrigger]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoAlertService_SubscribeAlertsServer = grpc.ServerStreamingServer[AlertTrigger]

// CryptoAlertService_ServiceDesc is the grpc.ServiceDesc for CryptoAlertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoAlertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptoalert.CryptoAlertService",
	HandlerType: (*CryptoAlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlert",
			Handler:    _CryptoAlertService_CreateAlert_Handler,
		},
		{
			MethodName: "GetAlerts",
			Handler:    _CryptoAlertService_GetAlerts_Handler,
		},
		{
			MethodName: "UpdateAlert",
			Handler:    _CryptoAlertService_UpdateAlert_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _CryptoAlertService_DeleteAlert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeAlerts",
			Handler:       _CryptoAlertService_SubscribeAlerts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/cryptoalert.proto",
}
